name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582
    - name: Build with Gradle Wrapper
      run: ./gradlew build
  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582
#  release:
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#      - name: Create Release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: "v${{ github.run_number }}"
#          release_name: "Release v${{ github.run_number }}"
#          body: |
#            New release automatically created on push to main branch.
#            - Build Status: Completed
#            - Dependencies fetched from JitPack.
#          draft: false
#          prerelease: false
#  release:
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#      - name: Get latest tag
#        id: get_latest_tag
#        run: |
#          # Fetch all tags
#          git fetch --tags
#
#          # Get the latest tag, default to 1.0.0 if no tags exist
#          latest_tag=$(git tag --sort=-v:refname | head -n 1)
#          if [ -z "$latest_tag" ]; then
#            echo "latest_tag=1.0.0" >> $GITHUB_ENV
#          else
#            echo "latest_tag=$latest_tag" >> $GITHUB_ENV
#          fi
#      - name: Generate new version
#        id: generate_new_version
#        run: |
#          # Parse the latest tag
#          IFS='.' read -r major minor patch <<< "${{ env.latest_tag }}"
#
#          # Increment the patch version
#          new_patch=$((patch + 1))
#          new_version="$major.$minor.$new_patch"
#
#          # Export the new version
#          echo "new_version=$new_version" >> $GITHUB_ENV
#      - name: Create Release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ env.new_version }}
#          release_name: "Release ${{ env.new_version }}"
#          body: |
#            New release automatically created on push to main branch.
#            - Version: ${{ env.new_version }}
#          draft: false
#          prerelease: false
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Fetch all tags
          git fetch --tags
          
          # Get the latest tag, or default to 1.0.0
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          if [[ -z "$latest_tag" || ! "$latest_tag" =~ ^v?[0-9]+(\.[0-9]+)*$ ]]; then
            echo "latest_tag=v1.0.0" >> $GITHUB_ENV
          else
            echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          fi

      - name: Generate new version
        id: generate_new_version
        run: |
          # Strip 'v' prefix if present
          clean_tag="${{ env.latest_tag }}"
          clean_tag=${clean_tag//v/}  # Remove 'v' from the tag if it exists

          # Parse the tag into major, minor, patch
          IFS='.' read -r major minor patch <<< "$clean_tag"

          # Increment the patch version
          new_patch=$((patch + 1))
          new_version="v$major.$minor.$new_patch"

          # Export the new version
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_version }}
          release_name: "Release ${{ env.new_version }}"
          body: |
            New release automatically created on push to main branch.
            - Version: ${{ env.new_version }}
          draft: false
          prerelease: false
